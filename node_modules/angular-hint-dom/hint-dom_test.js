var hintLog = angular.hint;
describe('ngHintDom', function() {

  var $controller, $rootScope, $location;

  beforeEach(module('ngHintDom'));
  beforeEach(module(function(_$controllerProvider_) {
    $controllerProvider = _$controllerProvider_;
  }));
  beforeEach(module(function($provide) {
    $provide.value('$nullService', {'key': null});
  }));
  beforeEach(module(function($provide) {
    var cycle = {};
    cycle.child = cycle;
    $provide.value('$cycleService', { cycle: cycle
    });
  }));
  beforeEach(inject(function(_$controller_, _$rootScope_, _$location_, _$compile_) {
    $controller = _$controller_;
    $rootScope = _$rootScope_;
    $location = _$location_;
    $compile = _$compile_;
    //hintLog.logMessage = jasmine.createSpy('logMessage');
  }));

  describe('controller decorating', function() {

    it('should maintain normal controller logic', function() {
      var controllerMock = function() {
        var element = document.createElement('a');
        element.innerHTML = 'testValue';
      };
      var ctrl = $controller(controllerMock);
      expect(ctrl).toBeDefined();
    });


    it('should call logic to patch prototypes', function() {
      spyOn(hintLog, 'logMessage');
      expect(hintLog.logMessage).not.toHaveBeenCalled();
      var controllerMock = function() {
        var element = document.createElement('a');
        element.getAttribute('NamedNodeMap');
      };
      var ctrl = $controller(controllerMock);
      expect(hintLog.logMessage.callCount).toBe(2);
    });


    it('should not decorate NgModelController', function() {
      spyOn(hintLog, 'logMessage');
      var scope = $rootScope.$new();
      angular.module('SampleApp', []).controller('SampleController', function($scope) {
        $scope.types = [
            { name: 'Controllers', isChecked: false},
            { name: 'Directives', isChecked: false},
            { name: 'DOM', isChecked: false},
            { name: 'Events', isChecked: false},
            { name: 'Interpolation', isChecked: false},
            { name: 'Modules', isChecked: false}
          ];
      });
      var ctrl = $controller('SampleController', {$scope: scope});
      var elm = angular.element('<div ng-controller="SampleController">' +
                                  '<span ng-repeat="type in types">' +
                                    '<input  type="checkbox" id="{{type.name}}" ng-click="changeList()" ng-model="type.isChecked">' +
                                      '{{type.name}}' +
                                  '</span>' +
                                '</div>');
      $compile(elm)(scope);
      $rootScope.$digest();
      expect(hintLog.logMessage).not.toHaveBeenCalled();
    });


    it('should not decorate FormController', function() {
      spyOn(hintLog, 'logMessage');
      var scope = $rootScope.$new();
      angular.module('SampleApp', []).controller('SampleController', function($scope) {
        $scope.types = [
            { name: 'Controllers', isChecked: false},
            { name: 'Directives', isChecked: false},
            { name: 'DOM', isChecked: false},
            { name: 'Events', isChecked: false},
            { name: 'Interpolation', isChecked: false},
            { name: 'Modules', isChecked: false}
          ];
      });
      var ctrl = $controller('SampleController', {$scope: scope});
      var elm = angular.element('<div ng-controller="SampleController">' +
                                  '<form></form>',
                                '</div>');
      $compile(elm)(scope);
      $rootScope.$digest();
      expect(hintLog.logMessage).not.toHaveBeenCalled();
    });

    it('should correctly patch services', function() {
      var controllerMock = function($location) {
        $location.path();
      };
      expect(function(){
        var ctrl = $controller(controllerMock);
      }).not.toThrow();
    });


    it('should handle patching services with null key values', function() {
      var controllerMock = function($nullService) {
        $nullService.key;
      };
      expect(function(){
        var ctrl = $controller(controllerMock);
      }).not.toThrow();
    });


    it('should handle patching objects with references back to themselves', function() {
      var controllerMock = function($cycleService) {
        $cycleService.child;
      };
      expect(function(){
        var ctrl = $controller(controllerMock);
      }).not.toThrow();
    });


    it('should not patch functions multiple times', inject(function($rootScope) {
      spyOn(hintLog, 'logMessage');
      var someScope = $rootScope.$new();
      expect(hintLog.logMessage.callCount).toBe(0);
      var controllerMock = function($scope) {
        $scope.someFunction = function() {
          console.log('some function called');
        };
        $scope.someFunction = function() {
          document.createElement('e');
        };
      };

      var ctrl = $controller(controllerMock, {$scope: someScope});
      someScope.someFunction();
      expect(hintLog.logMessage.callCount).toBe(1);
    }));


    it('should call logic to patch created elements', function() {
      spyOn(hintLog, 'logMessage');
      expect(hintLog.logMessage).not.toHaveBeenCalled();
      var controllerMock = function() {
        var element = document.createElement('a');
      };
      var ctrl = $controller(controllerMock);
      expect(hintLog.logMessage).toHaveBeenCalled();
    });


    it('should unpatch prototypes after execution', function() {
      spyOn(hintLog, 'logMessage');
      //Should cause calls to the listener for manipulation
      var controllerMock = function() {
        var element = document.getElementById('a');
      };
      var ctrl = $controller(controllerMock);
      //Should not cause calls to the listener because of unpatching
      expect(hintLog.logMessage.callCount).toBe(1);
      var elem = document.getElementById('div');
      expect(hintLog.logMessage.callCount).toBe(1);
    });


    it('should patch methods on the controller instance', function() {
      spyOn(hintLog, 'logMessage');
      expect(hintLog.logMessage).not.toHaveBeenCalled();
      var controllerMock = function() {
        this.someMethod = function () {
          var element = document.createElement('a');
          element.innerHTML = 'testValue';
        };
      };
      var ctrl = $controller(controllerMock);
      ctrl.someMethod();
      expect(hintLog.logMessage).toHaveBeenCalled();
    });


    it('should patch methods on the $scope that is injected into the controller instance',
      inject(function($rootScope) {
        spyOn(hintLog, 'logMessage');
        var thisScope = $rootScope.$new();
        angular.module('SampleApp', []).controller('SampleController', function($scope) {
            $scope.testFunction = function() {
              document.createElement('div');
            };
        });
        var ctrl = $controller('SampleController', {$scope: thisScope});
        thisScope.testFunction();
        expect(hintLog.logMessage).toHaveBeenCalled();
    }));


    it('should patch methods on the $scope that is injected into the controller instance',
      inject(function($rootScope) {
        spyOn(hintLog, 'logMessage');
        var thisScope = $rootScope.$new();
        angular.module('SampleApp', []).controller('SampleController', function($scope) {
            $scope.testFunction = function() {
              document.createElement('div');
            };
            $scope.$apply();
        });
        var ctrl = $controller('SampleController', {$scope: $rootScope});
        thisScope.testFunction();
        $rootScope.$apply();
        expect(hintLog.logMessage).toHaveBeenCalled();
    }));


    it('should get controllers to patch if passed their name', function() {
      angular.module('SampleApp', []).controller('SampleController', function() {});
      expect(function() {
        var ctrl = $controller('SampleController');
      }).not.toThrow();
    });


    it('should allow controllers to be created from global functions', function($scope) {
      var scope = $rootScope.$new();
      window.GlobalFunction = function GlobalFunction($scope) {
        $scope.types = [
            { name: 'Controllers', isChecked: false},
            { name: 'Directives', isChecked: false},
            { name: 'DOM', isChecked: false},
            { name: 'Events', isChecked: false},
            { name: 'Interpolation', isChecked: false},
            { name: 'Modules', isChecked: false}
          ];
      }
      var ctrl = $controller('GlobalFunction', {$scope: scope});
      var elm = angular.element('<div ng-controller="GlobalFunction">' +
                                  '<span ng-repeat="type in types">' +
                                    '<input  type="checkbox" id="{{type.name}}" ng-click="changeList()" ng-model="type.isChecked">' +
                                      '{{type.name}}' +
                                  '</span>' +
                                  '<form></form>' +
                                '</div>');
      expect(function() {
        $compile(elm)(scope);
        $rootScope.$digest();
      }).not.toThrow();
    });


    it('should throw a helpful error if the controller cannot be created', function($scope) {
      var scope = $rootScope.$new();
      window.GlobalFunction = function GlobalFunction($scope) {
        $scope.types = [
            { name: 'Controllers', isChecked: false},
            { name: 'Directives', isChecked: false},
            { name: 'DOM', isChecked: false},
            { name: 'Events', isChecked: false},
            { name: 'Interpolation', isChecked: false},
            { name: 'Modules', isChecked: false}
          ];
      }
      expect(function() {
        var ctrl = $controller('NotTheGlobalFunction', {$scope: scope});
      }).toThrow('The controller function for NotTheGlobalFunction could not be found. ' +
          'Is the function registered under that name?');
    });


    it('should fail gracefully if a property cannot be set', inject(function($rootScope) {
      var element = document.createElement('div');
      $rootScope.element = element;
      var MockController = function($rootScope) {
      };
      expect(function(){
        var ctrl = $controller(MockController);
      }).not.toThrow();
    }));
  });

  describe('asynchronous decorating', function() {
    it('should handle asynchronous DOM manipulations', inject(function($rootScope, $timeout) {
      spyOn(hintLog, 'logMessage');
      var MockController = function($timeout) {
        $timeout(function() {
          var element = document.createElement('a');
          timeoutCompleted = true;
        }, 0);
      };
      var ctrl = $controller(MockController);
      $timeout.flush();
      expect(hintLog.logMessage).toHaveBeenCalled();
    }));


    it('should detect both synchronous and asynchronous calls in the same controller',
      inject(function($rootScope, $timeout) {
        spyOn(hintLog, 'logMessage');
        var MockController = function($timeout) {
          var element = document.createElement('a');
          $timeout(function() {
            var element = document.createElement('a');
            timeoutCompleted = true;
          }, 0);
        };
        var ctrl = $controller(MockController);
        $timeout.flush();
        expect(hintLog.logMessage).toHaveBeenCalled();
    }));
  });
});
